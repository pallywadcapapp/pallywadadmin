@{
    ViewBag.Title = "Members Accounts Position";
}
<style>
    .myspan{
        width:100% !important;
        display: grid;
    }
    .savings{
        color: green;
    }

    .loans{
        color: red;
    }
</style>
<div class="container-fluid">
    <!-- Breadcrumbs-->
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            
        </li>
        <li class="breadcrumb-item active">Member Account Positions</li>
    </ol>
    <!-- Example DataTables Card-->

    <div id="tab">
        <ul>
            <li><a href="#tabs-1">Accounts Overview</a></li>
            <!--<li><a href="#tabs-2">Posted Payments</a></li>-->
        </ul>
        <div id="tabs-1">
            <div class="card mb-3">
                <div class="card-header">
                    <i class="fa fa-table"></i>Account Overview
                </div>
                <div class="card-body">
                    <div class="row">

                        <div class="col-sm-12">
                            <div id="reportrange" class="pull-right"
                                style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc">
                                <i class="glyphicon glyphicon-calendar fa fa-calendar"></i>
                                <span>December 30, 2014 - January 28, 2015</span> <b class="caret"></b>
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="table-responsive">
                                <!--<a id="demo02" class="btn btn-success" data-toggle="modal"
                                    data-target="#bulkUploadModal">Post Bulk payment</a>-->
                                <table id="postedSavingsTab" class="table table-bordered" width="100%"
                                    cellspacing="0" data-show-footer="true" data-pagination="true"
                                    data-sort-name="memberid" data-sort-order="desc" data-page-size="50"
                                    data-page-list="[ 25, 50, 100, 200, 500, ALL]" data-show-header="true"
                                    data-id-field="memberid" data-show-refresh="true" data-show-export="true"
                                    data-show-columns="true" data-show-toggle="true" data-search="true" data-group-by="true"
                                    data-group-by-field="memberId">
                                </table>

                            </div>
                        </div>
                    </div>


                </div>
                <div class="card-footer small text-muted">Updated Today at <span id="todayT"></span></div>

            </div>
        </div>
    </div>
    <div id="viewJournalModal" class="modal fade" role="dialog">
        <div class="modal-dialog  modal-lg">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Journal Details</h4>
                </div>
                <div class="modal-body">
                    <div class="col-xs-6">
                        <p>
                            <span>Voucher No: </span><span name="voucherNo" id="voucherNoSummation"></span>
                        </p>
                        <p>
                            <span>Name: </span><span name="receivedFrom" id="receivedFromSummation"></span>
                        </p>
                        <p>
                            <span>Cost Center: </span><span name="ccenter" id="ccenterSummation"></span>
                        </p>
                        <p>
                            <span>Trans. Date: </span><span name="transDate" id="transDateSummation"></span>
                        </p>
                        <p>
                            <span>Posting Date: </span><span name="postedDate" id="postedDateSummation"></span>
                        </p>
                    </div>
                    <div class="col-xs-6">
                        <p>
                            <span>Amount: </span><span name="amount" id="amountSummation"></span>
                        </p>
                        <p>
                            <span>Branch: </span><span name="branch" id="branchSummation"></span>
                        </p>
                        <p>
                            <span>Cheque No: </span><span name="chequeNo" id="chequeNoSummation"></span>
                        </p>
                        <p>
                            <span>Narration: </span><span name="cashcodeDesc" id="typeSummation"></span>
                        </p>
                        <p>
                            <span>Approval Status: </span><span name="approvalForm" id="approvalFormSummation"></span>
                        </p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" onclick="getJV()" class="btn btn-info">View JV</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>

</div>

@section Scripts{
<script src="~/Scripts/config.js" type="text/javascript"></script>
<script>
    var appyear = localStorage.getItem('app_year');
    var startyear = new Date(appyear, 0, 1).addHours(2).toISOString().split('T')[0];
    var today = new Date().addHours(2).toISOString().split('T')[0];
    //var start = startyear.toISOString().split('T')[0];
    var processByEmail = JSON.parse(localStorage.getItem('uemail'));
    var processBy = localStorage.getItem('fullname');
    var status = ''; var transtype = '';
    var revisedData = [];
    var sheetData = [];

    function getJV() {
        var id = JSON.parse(localStorage.getItem('jvIdex'));
        window.location.href = '@Html.Raw(Url.Action("JV","Certificates"))' + '?id=' + id
    }
    function priceDetailFormatter(value, row, index) {
        return currformatter.format(value);
    }
    function statusFormatter(value, row, index) {
        if (value == 'Invalid member') {
            return '<span><i class="fa fa-close"></i> ' + value + '</span>';
        } else {
            return '<span><i class="fa fa-user-circle"></i> ' + value + '</span>';
        }
    }
    function priceFormatter(data) {
        var field = this.field
        return currformatter.format(data.map(function (row) {
            return +row[field]
        }).reduce(function (sum, i) {
            return sum + i
        }, 0))
    }

    function processFormatter(data) {
        sheetData = data;
        var field = 'status';
        //var allvalid = true;
        for (var i = 0; i < sheetData.length; i++) {
            if (data[i][field] == 'Invalid member') {
                return '<button class="btn btn-success" disabled onclick="process()";>Process</button>';
            }
        }
        return '<button class="btn btn-success" onclick="process()";>Process</button>';
    }

    function process() {
        $('#scheduleTable').pleaseWait();
        console.log(sheetData);
        postData(appConfig.apiURL + 'api/admin/StartScheduleProcess', sheetData).then((data) => {
            if(data === null){
                toastr.error('error connecting to server');
            }
            $('#scheduleTable').pleaseWait('stop');// JSON data parsed by `data.json()` call
        }).catch((error) => {
            // Your error is here!
            console.log(error)
        });
    }


    function operationFormatter(value, row, index) {
        return '<div class="btn-group"><button data-toggle="dropdown" class="btn btn-danger dropdown-toggle" > Action <span class="caret" ></span ></button >' +
            ' <ul class="dropdown-menu">' +
            '<li><a id="demo01" class="btn" data-toggle="modal" data-target="#loadViewModal" onclick="loadView(\'' + value + '\')">Verify</a></li>' +
            ' </ul></div >'
    }
    function actionFormatter(value, row, index) {
        return '<a href="./tbdetails?year=2018&id=' + value + '" >' + value + '</a>';
    };
    function refreshTables() {
        var newUrl = appConfig.apiURL + 'api/generalledger/journal?startdate=' + startyear + '&enddate=' + today;
        var pnewUrl = appConfig.apiURL + 'api/generalledger/PostedJournal?startdate=' + startyear + '&enddate=' + today;
        $('#journalTab').bootstrapTable('refresh', { url: newUrl, silent: true });
        $('#postedSavingsTab').bootstrapTable('refresh', { url: pnewUrl, silent: true });
    }

    function refreshUploadTable(data) {
        console.log(data)
        //var newUrl = appConfig.apiURL + 'api/generalledger/journal?startdate=' + startyear + '&enddate=' + today;
        $('#scheduleTable').bootstrapTable({ data: data });

        $('#scheduleTable').bootstrapTable('resetView');
    }

    function viewPost(index) {
        localStorage.setItem('jvIdex', index);
        $.get(appConfig.apiURL + 'api/generalledger/JournalById?id=' + index, function (data) {
            try {
                for (var key in data) {
                    if (key == 'insuredname') {
                        var lname = data[key].split(' ')[0];
                        var fname = data[key].split(' ')[1];
                        $('[name="firstname"]').html(fname);
                        $('[name="lastname"]').html(lname);
                    }
                    if (key == 'businessclass') {
                        if (data[key] == 'Motor') {

                        } else {
                            $('.motor').hide();
                        }
                    }
                    console.log(key)
                    console.log(data[key]);
                    $('[name="' + key + '"]').html(data[key]);
                    if (key == 'transDate') {
                        //$('[name="' + key + '"]').html(new Date(data[key]).toLocaleDateString());
                        $('[name="' + key + '"]').html(moment(new Date(data[key])).format('DD-MMM-YYYY'));
                    }
                    if (key == 'postedDate') {
                        //$('[name="' + key + '"]').html(new Date(data[key]).toLocaleDateString());
                        $('[name="' + key + '"]').html(moment(new Date(data[key])).format('DD-MMM-YYYY'));
                    }
                    if (key == 'bookingDate') {
                        //$('[name="' + key + '"]').html(new Date(data[key]).toLocaleDateString());
                        $('[name="' + key + '"]').html(moment(new Date(data[key])).format('DD-MMM-YYYY'));
                    }
                    if (key == 'amount') {
                        $('[name="' + key + '"]').html(moneyFormat(data[key]));
                    }
                }
            } catch (e) {
                console.log(e);
            }
            $('#viewJournalModal').modal('show');
        }).fail(function (xhr, status, error) {
            toastr.error(xhr.responseJSON.message);
        })

        console.log(index);
    }


    $(function () {
        $('#startdate').val(startyear);
        $('#enddate').val(today);
        $('#load').click(function (e) {
            var startdate = $('#startdate').val();
            var enddate = $('#enddate').val();
            var glUrl = appConfig.apiURL + "./api/generalledger/Journal?startdate=" + startdate + '&enddate=' + enddate;
            $('#journalTab').bootstrapTable('refresh', { url: glUrl, silent: false });
        });

        function loadTable(startdate, enddate) {
            var pnewUrl = appConfig.apiURL + 'api/Dividends/AccountDetails?startdate=' + startdate + '&enddate=' + enddate;
            $('#postedSavingsTab').bootstrapTable('refresh', { url: pnewUrl, silent: false });
        }

        init_daterangepicker('reportrange', loadTable);


        $('#postedSavingsTab').bootstrapTable({
            idField: 'name',
            url: appConfig.apiURL + 'api/Dividends/AccountDetails?startdate=' + startyear + '&enddate=' + today,
            exportTypes: ['json', 'xml', 'csv', 'txt', 'sql', 'excel', 'pdf','powerpoint'],
            columns: [{
                field: 'memberId',
                title: '',
                checkbox: true
            }, {
                field: 'memberId',
                title: 'Member Id',
                formatter: memberFormatter

            }, {
                field: 'memberId',
                title: 'Name',
                formatter: memberFullnameFormatter

            }, {
                field: 'accountNo',
                title: 'Account No',
                formatter: accountFormatter

            }, 
            {
                field: 'accountNo',
                title: 'Account Type',
                formatter: accountTypeFormatter
            },
            {
                field: 'accountNo',
                title: 'Amount',
                formatter: accountAmountFormatter
            },
            /*{
                field: 'credit',
                title: 'Credit',
                formatter: moneyFormatter,
                footerFormatter: sumFormatter
            },*/
            ]//,
            /*onEventName: function (arg1, arg2) {
                console.log()
            }*/
        });
        $('#postedSavingsTab').on('post-body.bs.table', function () {
            $('[data-tooltip="true"]').tooltip({
                container: 'body'
            });
        });
        $('#postedSavingsTab').on('pre-body.bs.table', function () {
            var res = $('#postedSavingsTab').bootstrapTable('getData');
            tempgld = res;
            //localStorage.setItem('tempd', JSON.stringify($('#journalTab').bootstrapTable('getData')));
        });

        function buildElement(str, type){
            return '<span class="myspan ' + type +'">' + str + '</span>';
        }

        function memberFullnameFormatter(value, row, index){
            var result = '';
            //$.each(row, function(p){
            var data = row[0];
            for (var key in data) {
                if (key == 'memberId') {
                    //
                    result += buildElement(getMemberById(data[key]).fullname);
                }
                }
            //});
            return result;
        }

        function memberFormatter(value, row, index){
            var result = '';
            //$.each(row, function(p){
            var data = row[0];
            for (var key in data) {
                if (key == 'memberId') {
                    //
                    result += buildElement(data[key]);
                }
                }
            //});
            return result;
        }

        function accountFormatter(value, row, index){
            var result = '';
            $.each(row, function(p){
            var data = row[p];
            for (var key in data) {
                if (key == 'accountNo') {
                    //
                    result += buildElement(data[key]);
                }
                }
            });
            return result;
        }

        function accountTypeFormatter(value, row, index){
            var result = '';
            $.each(row, function(p){
            var data = row[p];
            for (var key in data) {
                if (key == 'acctype') {
                    if(data[key] == 'Normal' || data[key] == 'Savings' ){
                        result += buildElement('Savings', 'savings');
                    }else if(data[key] == 'Commodity'){
                        result += buildElement(data[key], 'loans');
                    }else{
                        result += buildElement(data[key], 'loans');
                    }
                    //result += buildElement(data[key]);
                }
                }
            });
            return result;
        }

        function accountAmountFormatter(value, row, index){
            var result = '';
            $.each(row, function(p){
            var data = row[p];
            for (var key in data) {
                if (key == 'acctype') {
                    if(data[key] == 'Normal' || data[key] == 'Savings' ){
                        result += buildElement(currformatter.format(data['savBalance']), 'savings');
                    }else{
                        result += buildElement(currformatter.format(data['loanBalance']), 'loans');
                    }
                    
                    
                }
                }
            });
            return result;
        }
        


        function approveFormatter(value, row, index) {
            if (row.debit === null || row.credit === null) {
                return '<button class="btn btn-info" id="' + index + '" onclick="viewPost(' + row.id + ');">VIEW</button> ';
            } else {
                var userroles = JSON.parse(localStorage.getItem('userroles'));
                if (userroles.includes('postingapproval')) {
                    return '<button class="btn btn-info" id="' + index + '" onclick="viewPost(' + row.id + ');">VIEW</button> ' +
                        '<button class="btn btn-success Financeadmin" id="' + index + '" onclick="approveJournal(' + index + ');">Approve</button> ' +
                        '<button class="btn btn-danger" id="' + index + '" onclick="declineJV(' + index + ');">Decline</button>';
                } else {
                    return '<button class="btn btn-info" id="' + index + '" onclick="viewPost(' + row.id + ');">VIEW</button> ';
                }

            }
        }

        function glcodeFormatter(value, row, index) {
            return '<span class="trigger">' + value + '</span>';
        }

        function reviseApproveFormatter(value, row, index) {
            return '<button class="btn btn-info" id="' + index + '" onclick="viewPost(' + row.id + ');">VIEW</button> ' +
                '<button class="btn btn-danger" id="' + index + '" onclick="revisePost(' + row.id + ');"><i class="fa fa-edit"></i> REVISE</button> ';
        }

        function viewApproveFormatter(value, row, index) {
            return '<button class="btn btn-info" id="' + index + '" onclick="viewPost(' + row.id + ');">VIEW</button> ';
        }
        function stateSTatusFormatter(value, row, index) {
            if (value === 'DECLINED') {
                return '<span class="btn-danger">' + value + '</span>';
            } else {
                return '<span class="btn-success">' + value + '</span>';
            }
        }

        $('#tab').tabs({
            collapsible: true
        })

        $('#postedSavingsTab').on('post-body.bs.table', function () {
            $(".table tbody > tr > td .trigger").each(function () {
                var gl = JSON.parse(localStorage.getItem('glcodes') || "[]");
                var gcode = $(this).text();
                $(this).attr('title', gl[gcode]);
            });
        });
    });

    async function AJAXSubmit(_oFormElement) {
        var oFormElement = document.getElementById('iform');
        oFormElement.action = appConfig.apiURL + 'api/file/PreviewSheet';
        var resultElement = oFormElement.elements.namedItem("result");
        const formData = new FormData(oFormElement);

        try {
            const response = await fetch(oFormElement.action, {
                method: 'POST',
                /*headers: {
                    "Content-Type": "application/json",
                    // 'Content-Type': 'application/x-www-form-urlencoded',
                    },*/
                body: formData
            });
            const pp = await response.json();
            if (response.ok) {
                refreshUploadTable(pp);
                $('#bulkUploadModal').modal('hide');
                toastr.success('upload successful');
            } else {
                toastr.error(pp.message);
            }
        } catch (error) {
            console.log(error)
            console.error('Error:', error);
        }
    }
</script>
}
